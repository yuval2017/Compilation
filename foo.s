;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1

;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 49

section .data
const_tbl:
	MAKE_VOID
	MAKE_NIL
	MAKE_LITERAL_BOOL(0)
	MAKE_LITERAL_BOOL(1)
	MAKE_LITERAL_STRING "whatever"
	MAKE_LITERAL_SYMBOL(const_tbl + 6)
	MAKE_LITERAL_CHAR(0)
	MAKE_LITERAL_RATIONAL(0,1)
	MAKE_LITERAL_RATIONAL(1,1)
	MAKE_LITERAL_RATIONAL(-1,1)
	MAKE_LITERAL_RATIONAL(5,1)
	MAKE_LITERAL_CHAR(32)
	MAKE_LITERAL_CHAR(116)
	MAKE_LITERAL_CHAR(9)
	MAKE_LITERAL_RATIONAL(3,1)
	MAKE_LITERAL_CHAR(110)
	MAKE_LITERAL_RATIONAL(4,1)
	MAKE_LITERAL_CHAR(10)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame

    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+0], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+8], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+16], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+24], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+32], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+40], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+48], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+56], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+64], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+72], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+80], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+88], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+96], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+104], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+112], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+120], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+128], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+136], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+144], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+152], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+160], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+168], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+176], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+184], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+192], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+200], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+208], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+216], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+224], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+232], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+240], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+248], rax

user_code_fragment:
;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
	mov rax, qword[fvar_tbl + 248] 
	push rax 
	mov rax, qword[fvar_tbl + 240] 
	push rax 
	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 5
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode1)
	jmp Lcont1
	Lcode1:
	push rbp
	mov rbp,rsp
	
		mov rax,const_tbl + 23
	push rax 
	mov rax,const_tbl + 23
	push rax 

                	push 2
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy3


              	mov rcx,1
              	Extend3:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend3
              	AddDummy3:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue3  
              	AddParams3:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams3  
              	Continue3: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode3)
              	jmp Lcont3
              Lcode3:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
  	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+1)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 1)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy4


              	mov rcx,2
              	Extend4:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend4
              	AddDummy4:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue4  
              	AddParams4:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams4  
              	Continue4: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode4)
              	jmp Lcont4
              Lcode4:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse1
	mov rax,const_tbl + 1
	jmp Lexit1
	Lelse1:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*4] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame5:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame5

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit1:

              
              	leave
              	ret
              Lcont4:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy6


              	mov rcx,2
              	Extend6:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend6
              	AddDummy6:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue6  
              	AddParams6:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams6  
              	Continue6: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode6)
              	jmp Lcont6
              Lcode6:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse2
	mov rax,const_tbl + 1
	jmp Lexit2
	Lelse2:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp + 8 * (4 + 0)] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame7:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame7

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit2:

              
              	leave
              	ret
              Lcont6:
	push rax
	mov rax, qword[rbp + 8 * (4 + 1)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy8


              	mov rcx,2
              	Extend8:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend8
              	AddDummy8:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue8  
              	AddParams8:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams8  
              	Continue8: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode8)
              	jmp Lcont8
              Lcode8:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract8

              Expand8:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown8:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown8
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit8

              Contract8:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList8:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList8

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack8:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack8


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit8:

              
		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame9:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame9

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont8:

              
              	leave
              	ret
              Lcont3:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame2:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame2

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont1:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 256] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode10)
	jmp Lcont10
	Lcode10:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy11


              	mov rcx,1
              	Extend11:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend11
              	AddDummy11:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue11  
              	AddParams11:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams11  
              	Continue11: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode11)
              	jmp Lcont11
              Lcode11:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse3
	mov rax, qword[rbp + 8 * (4 + 1)] 
	jmp Lexit3
	Lelse3:

		mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 2
	mov rax, qword[rbp + 8 * (4 + 0)] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 264] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame12:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame12

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit3:

              
              	leave
              	ret
              Lcont11:

              
              	leave
              	ret
              Lcont10:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 264] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode13)
	jmp Lcont13
	Lcode13:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy14


              	mov rcx,1
              	Extend14:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend14
              	AddDummy14:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue14  
              	AddParams14:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams14  
              	Continue14: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode14)
              	jmp Lcont14
              Lcode14:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse4
	mov rax, qword[rbp + 8 * (4 + 1)] 
	jmp Lexit4
	Lelse4:

		mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 272] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 2)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp + 8 * (4 + 0)] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame15:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame15

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit4:

              
              	leave
              	ret
              Lcont14:

              
              	leave
              	ret
              Lcont13:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 272] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 240] 
	push rax 
	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 248] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 5
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode16)
	jmp Lcont16
	Lcode16:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy17


              	mov rcx,1
              	Extend17:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend17
              	AddDummy17:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue17  
              	AddParams17:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams17  
              	Continue17: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode17)
              	jmp Lcont17
              Lcode17:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 1
              	jae Contract17

              Expand17:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown17:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown17
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit17

              Contract17:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList17:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList17

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack17:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack17


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit17:

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse5

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame19:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame19

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit5
	Lelse5:

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[fvar_tbl + 280] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*4] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame18:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame18

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit5:

              
              	leave
              	ret
              Lcont17:

              
              	leave
              	ret
              Lcont16:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 280] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 240] 
	push rax 
	mov rax, qword[fvar_tbl + 272] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode20)
	jmp Lcont20
	Lcode20:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy21


              	mov rcx,1
              	Extend21:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend21
              	AddDummy21:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue21  
              	AddParams21:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams21  
              	Continue21: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode21)
              	jmp Lcont21
              Lcode21:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 1
              	jae Contract21

              Expand21:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown21:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown21
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit21

              Contract21:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList21:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList21

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack21:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack21


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit21:

              
		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 1
	push rax 
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy23


              	mov rcx,2
              	Extend23:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend23
              	AddDummy23:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue23  
              	AddParams23:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams23  
              	Continue23: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode23)
              	jmp Lcont23
              Lcode23:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse6
	mov rax, qword[rbp + 8 * (4 + 0)] 
	jmp Lexit6
	Lelse6:

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame24:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame24

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit6:

              
              	leave
              	ret
              Lcont23:
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame22:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame22

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont21:

              
              	leave
              	ret
              Lcont20:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 288] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode25)
	jmp Lcont25
	Lcode25:
	push rbp
	mov rbp,rsp
	
              	cmp qword[rbp+8*3], 1
              	jae Contract25

              Expand25:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown25:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown25
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit25

              Contract25:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList25:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList25

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack25:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack25


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit25:

              	mov rax, qword[rbp + 8 * (4 + 0)] 

              
              	leave
              	ret
              Lcont25:
	mov qword[fvar_tbl + 296] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 24] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode26)
	jmp Lcont26
	Lcode26:
	push rbp
	mov rbp,rsp
	
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy28


              	mov rcx,1
              	Extend28:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend28
              	AddDummy28:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue28  
              	AddParams28:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams28  
              	Continue28: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode28)
              	jmp Lcont28
              Lcode28:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy29


              	mov rcx,2
              	Extend29:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend29
              	AddDummy29:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue29  
              	AddParams29:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams29  
              	Continue29: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode29)
              	jmp Lcont29
              Lcode29:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit7
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse8

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame30:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame30

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit8
	Lelse8:
	mov rax,const_tbl + 2
	Lexit8:
Lexit7:

              
              	leave
              	ret
              Lcont29:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rax, qword[rbp + 8 * (4 + 0)] 
	mov rax, qword[rax] 

              
              	leave
              	ret
              Lcont28:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame27:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame27

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont26:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 304] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 96] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode31)
	jmp Lcont31
	Lcode31:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy32


              	mov rcx,1
              	Extend32:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend32
              	AddDummy32:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue32  
              	AddParams32:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams32  
              	Continue32: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode32)
              	jmp Lcont32
              Lcode32:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract32

              Expand32:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown32:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown32
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit32

              Contract32:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList32:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList32

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack32:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack32


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit32:

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse9

		mov rax,const_tbl + 32
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame34:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame34

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit9
	Lelse9:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame33:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame33

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit9:

              
              	leave
              	ret
              Lcont32:

              
              	leave
              	ret
              Lcont31:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 96] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode35)
	jmp Lcont35
	Lcode35:
	push rbp
	mov rbp,rsp
		mov rax, qword[rbp + 8 * (4 + 0)] 
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse10
	mov rax,const_tbl + 2
	jmp Lexit10
	Lelse10:
	mov rax,const_tbl + 4
	Lexit10:

              
              	leave
              	ret
              Lcont35:
	mov qword[fvar_tbl + 312] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 32] 
	push rax 
	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 176] 
	push rax 
	mov rax, qword[fvar_tbl + 168] 
	push rax 
	mov rax, qword[fvar_tbl + 160] 
	push rax 
	mov rax, qword[fvar_tbl + 152] 
	push rax 
	mov rax, qword[fvar_tbl + 144] 
	push rax 
	mov rax, qword[fvar_tbl + 256] 
	push rax 
	mov rax, qword[fvar_tbl + 264] 
	push rax 
	mov rax, qword[fvar_tbl + 128] 
	push rax 
	mov rax, qword[fvar_tbl + 16] 
	push rax 
	mov rax, qword[fvar_tbl + 8] 
	push rax 

                	push 13
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode36)
	jmp Lcont36
	Lcode36:
	push rbp
	mov rbp,rsp
	
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy56


              	mov rcx,1
              	Extend56:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend56
              	AddDummy56:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue56  
              	AddParams56:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams56  
              	Continue56: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode56)
              	jmp Lcont56
              Lcode56:
              	push rbp
              	mov rbp, rsp

              	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy57


              	mov rcx,2
              	Extend57:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend57
              	AddDummy57:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue57  
              	AddParams57:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams57  
              	Continue57: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode57)
              	jmp Lcont57
              Lcode57:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse17
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit17
	Lelse17:
	mov rax,const_tbl + 2
	Lexit17:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse14

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame60:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame60

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit14
	Lelse14:
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse16
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit16
	Lelse16:
	mov rax,const_tbl + 2
	Lexit16:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse15

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame59:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame59

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit15
	Lelse15:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame58:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame58

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit15:
	Lexit14:

              
              	leave
              	ret
              Lcont57:

              
              	leave
              	ret
              Lcont56:
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy38


              	mov rcx,1
              	Extend38:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend38
              	AddDummy38:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue38  
              	AddParams38:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams38  
              	Continue38: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode38)
              	jmp Lcont38
              Lcode38:
              	push rbp
              	mov rbp, rsp

              	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy39


              	mov rcx,2
              	Extend39:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend39
              	AddDummy39:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue39  
              	AddParams39:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams39  
              	Continue39: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode39)
              	jmp Lcont39
              Lcode39:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 1
              	jae Contract39

              Expand39:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown39:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown39
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit39

              Contract39:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList39:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList39

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack39:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack39


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit39:

              
		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 34
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*5] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame40:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame40

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont39:
	mov qword[fvar_tbl + 144] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy41


              	mov rcx,2
              	Extend41:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend41
              	AddDummy41:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue41  
              	AddParams41:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams41  
              	Continue41: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode41)
              	jmp Lcont41
              Lcode41:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 1
              	jae Contract41

              Expand41:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown41:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown41
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit41

              Contract41:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList41:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList41

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack41:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack41


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit41:

              
		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 51
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*6] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame42:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame42

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont41:
	mov qword[fvar_tbl + 152] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*7] 
	push rax 

                	push 1
	mov rax, qword[rbp + 8 * (4 + 0)] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy43


              	mov rcx,2
              	Extend43:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend43
              	AddDummy43:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue43  
              	AddParams43:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams43  
              	Continue43: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode43)
              	jmp Lcont43
              Lcode43:
              	push rbp
              	mov rbp, rsp

              	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 32
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy44


              	mov rcx,3
              	Extend44:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend44
              	AddDummy44:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue44  
              	AddParams44:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams44  
              	Continue44: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode44)
              	jmp Lcont44
              Lcode44:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract44

              Expand44:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown44:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown44
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit44

              Contract44:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList44:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList44

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack44:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack44


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit44:

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*12] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse11

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 51
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame46:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame46

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit11
	Lelse11:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*3] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame45:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame45

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit11:

              
              	leave
              	ret
              Lcont44:

              
              	leave
              	ret
              Lcont43:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 160] , rax
	mov rax, SOB_VOID_ADDRESS

		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy49


              	mov rcx,2
              	Extend49:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend49
              	AddDummy49:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue49  
              	AddParams49:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams49  
              	Continue49: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode49)
              	jmp Lcont49
              Lcode49:
              	push rbp
              	mov rbp, rsp

              
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 32
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy51


              	mov rcx,3
              	Extend51:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend51
              	AddDummy51:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue51  
              	AddParams51:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams51  
              	Continue51: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode51)
              	jmp Lcont51
              Lcode51:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 40
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy52


              	mov rcx,4
              	Extend52:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend52
              	AddDummy52:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue52  
              	AddParams52:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams52  
              	Continue52: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode52)
              	jmp Lcont52
              Lcode52:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*3] 
	mov rax, qword[rax+8*12] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit12
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*3] 
	mov rax, qword[rax+8*10] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse13

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*3] 
	mov rax, qword[rax+8*11] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*3] 
	mov rax, qword[rax+8*10] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame53:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame53

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit13
	Lelse13:
	mov rax,const_tbl + 2
	Lexit13:
Lexit12:

              
              	leave
              	ret
              Lcont52:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 40
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy54


              	mov rcx,4
              	Extend54:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend54
              	AddDummy54:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue54  
              	AddParams54:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams54  
              	Continue54: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode54)
              	jmp Lcont54
              Lcode54:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract54

              Expand54:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown54:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown54
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit54

              Contract54:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList54:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList54

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack54:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack54


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit54:

              
		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame55:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame55

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont54:

              
              	leave
              	ret
              Lcont51:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame50:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame50

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont49:
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy48


              	mov rcx,2
              	Extend48:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend48
              	AddDummy48:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue48  
              	AddParams48:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams48  
              	Continue48: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode48)
              	jmp Lcont48
              Lcode48:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*8] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp + 8 * (4 + 0)] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 168] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*9] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp + 8 * (4 + 0)] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 176] , rax
	mov rax, SOB_VOID_ADDRESS

              
              	leave
              	ret
              Lcont48:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame47:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame47

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont38:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame37:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame37

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont36:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 32] 
	push rax 
	mov rax, qword[fvar_tbl + 144] 
	push rax 
	mov rax, qword[fvar_tbl + 248] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode61)
	jmp Lcont61
	Lcode61:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy62


              	mov rcx,1
              	Extend62:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend62
              	AddDummy62:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue62  
              	AddParams62:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams62  
              	Continue62: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode62)
              	jmp Lcont62
              Lcode62:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract62

              Expand62:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown62:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown62
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit62

              Contract62:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList62:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList62

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack62:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack62


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit62:

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse18

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 68
	push rax 

                	push 2
	mov rax, qword[fvar_tbl + 152] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax,const_tbl + 34
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame64:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame64

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit18
	Lelse18:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax,const_tbl + 68
	push rax 

                	push 2
	mov rax, qword[fvar_tbl + 152] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame63:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame63

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit18:

              
              	leave
              	ret
              Lcont62:

              
              	leave
              	ret
              Lcont61:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 320] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 168] 
	push rax 
	mov rax, qword[fvar_tbl + 176] 
	push rax 
	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 312] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 

                	push 6
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode65)
	jmp Lcont65
	Lcode65:
	push rbp
	mov rbp,rsp
	
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy67


              	mov rcx,1
              	Extend67:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend67
              	AddDummy67:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue67  
              	AddParams67:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams67  
              	Continue67: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode67)
              	jmp Lcont67
              Lcode67:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy68


              	mov rcx,2
              	Extend68:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend68
              	AddDummy68:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue68  
              	AddParams68:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams68  
              	Continue68: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode68)
              	jmp Lcont68
              Lcode68:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit19
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*4] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*5] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse21

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame69:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame69

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit21
	Lelse21:
	mov rax,const_tbl + 2
	Lexit21:
	jmp Lexit20
	Lelse20:
	mov rax,const_tbl + 2
	Lexit20:
Lexit19:

              
              	leave
              	ret
              Lcont68:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy70


              	mov rcx,2
              	Extend70:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend70
              	AddDummy70:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue70  
              	AddParams70:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams70  
              	Continue70: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode70)
              	jmp Lcont70
              Lcode70:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 2
              	jae Contract70

              Expand70:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown70:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown70
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 2
              	mov qword[rbp+WORD_SIZE*(5)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit70

              Contract70:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 1
               

              	MakePotsList70:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList70

              	mov rcx, 5
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 2
              
              ShiftStack70:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack70


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],2
              	mov qword[rbp+WORD_SIZE*(4+1)],r14
              	mov rsp,rbp

              Exit70:

              
		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame71:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame71

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont70:

              
              	leave
              	ret
              Lcont67:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame66:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame66

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont65:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 328] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 32] 
	push rax 
	mov rax, qword[fvar_tbl + 200] 
	push rax 

                	push 4
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode72)
	jmp Lcont72
	Lcode72:
	push rbp
	mov rbp,rsp
	
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy74


              	mov rcx,1
              	Extend74:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend74
              	AddDummy74:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue74  
              	AddParams74:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams74  
              	Continue74: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode74)
              	jmp Lcont74
              Lcode74:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy75


              	mov rcx,2
              	Extend75:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend75
              	AddDummy75:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue75  
              	AddParams75:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams75  
              	Continue75: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode75)
              	jmp Lcont75
              Lcode75:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse22
	mov rax, qword[rbp + 8 * (4 + 0)] 
	jmp Lexit22
	Lelse22:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame76:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame76

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit22:

              
              	leave
              	ret
              Lcont75:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy77


              	mov rcx,2
              	Extend77:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend77
              	AddDummy77:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue77  
              	AddParams77:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams77  
              	Continue77: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode77)
              	jmp Lcont77
              Lcode77:
              	push rbp
              	mov rbp, rsp

              
              	cmp qword[rbp+8*3], 1
              	jae Contract77

              Expand77:
              	mov rcx, 0
              	mov rdx, [rbp +WORD_SIZE*3]
              	add rdx, 4
              ShiftStackDown77:
              	mov rbx,qword[rbp+WORD_SIZE*rcx]
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	dec rdx
              	inc rcx
              	cmp rdx, 0
              	jne ShiftStackDown77
              	sub rbp, WORD_SIZE
              	mov qword[rbp+WORD_SIZE*3], 1
              	mov qword[rbp+WORD_SIZE*(4)],SOB_NIL_ADDRESS
              	mov rsp, rbp

              	jmp Exit77

              Contract77:
              	mov rbx,qword[rbp+WORD_SIZE*3]    
              	mov r14,SOB_NIL_ADDRESS
              	mov rcx, rbx
              	sub rcx, 0
               

              	MakePotsList77:
              	dec rbx
              	mov rdx,r14
              	mov rax,PVAR(rbx)
              	MAKE_PAIR (r14, rax,rdx)
              	loop MakePotsList77

              	mov rcx, 4
              	mov rdx, qword[rbp+WORD_SIZE*3] 
              	sub rdx, 1
              
              ShiftStack77:
              	mov rbx,qword[rbp+WORD_SIZE*(rcx-1)]
              	add rcx,rdx
              	mov qword[rbp+WORD_SIZE*(rcx-1)],rbx
              	sub rcx,rdx
              	loop ShiftStack77


              	shl rdx,3
              	add rbp,rdx
              	mov qword[rbp+WORD_SIZE*3],1
              	mov qword[rbp+WORD_SIZE*(4+0)],r14
              	mov rsp,rbp

              Exit77:

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse23
	mov rax,const_tbl + 34
	jmp Lexit23
	Lelse23:

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame78:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame78

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit23:

              
              	leave
              	ret
              Lcont77:

              
              	leave
              	ret
              Lcont74:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame73:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame73

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont72:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 200] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 168] 
	push rax 

                	push 1
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode79)
	jmp Lcont79
	Lcode79:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy80


              	mov rcx,1
              	Extend80:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend80
              	AddDummy80:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue80  
              	AddParams80:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams80  
              	Continue80: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode80)
              	jmp Lcont80
              Lcode80:
              	push rbp
              	mov rbp, rsp

              
		mov rax,const_tbl + 34
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame81:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame81

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont80:

              
              	leave
              	ret
              Lcont79:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 336] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 192] 
	push rax 
	mov rax, qword[fvar_tbl + 168] 
	push rax 
	mov rax, qword[fvar_tbl + 16] 
	push rax 

                	push 3
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode82)
	jmp Lcont82
	Lcode82:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy83


              	mov rcx,1
              	Extend83:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend83
              	AddDummy83:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue83  
              	AddParams83:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams83  
              	Continue83: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode83)
              	jmp Lcont83
              Lcode83:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse24

		mov rax,const_tbl + 51
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame84:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame84

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit24
	Lelse24:
	mov rax,const_tbl + 2
	Lexit24:

              
              	leave
              	ret
              Lcont83:

              
              	leave
              	ret
              Lcont82:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 344] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 16] 
	push rax 
	mov rax, qword[fvar_tbl + 8] 
	push rax 

                	push 2
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode85)
	jmp Lcont85
	Lcode85:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy86


              	mov rcx,1
              	Extend86:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend86
              	AddDummy86:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue86  
              	AddParams86:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams86  
              	Continue86: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode86)
              	jmp Lcont86
              Lcode86:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lexit25

		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame87:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame87

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
Lexit25:

              
              	leave
              	ret
              Lcont86:

              
              	leave
              	ret
              Lcont85:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 352] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 144] 
	push rax 
	mov rax, qword[fvar_tbl + 264] 
	push rax 

                	push 2
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode88)
	jmp Lcont88
	Lcode88:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy89


              	mov rcx,1
              	Extend89:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend89
              	AddDummy89:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue89  
              	AddParams89:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams89  
              	Continue89: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode89)
              	jmp Lcont89
              Lcode89:
              	push rbp
              	mov rbp, rsp

              
		mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax,const_tbl + 34
	push rax 
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy91


              	mov rcx,2
              	Extend91:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend91
              	AddDummy91:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue91  
              	AddParams91:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams91  
              	Continue91: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode91)
              	jmp Lcont91
              Lcode91:
              	push rbp
              	mov rbp, rsp

              
		mov rax,const_tbl + 51
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame92:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame92

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont91:
	push rax 

                	push 3
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame90:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame90

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont89:

              
              	leave
              	ret
              Lcont88:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 360] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 240] 
	push rax 
	mov rax, qword[fvar_tbl + 320] 
	push rax 
	mov rax, qword[fvar_tbl + 176] 
	push rax 
	mov rax, qword[fvar_tbl + 72] 
	push rax 
	mov rax, qword[fvar_tbl + 80] 
	push rax 

                	push 5
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode93)
	jmp Lcont93
	Lcode93:
	push rbp
	mov rbp,rsp
		mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy94


              	mov rcx,1
              	Extend94:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend94
              	AddDummy94:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue94  
              	AddParams94:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams94  
              	Continue94: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode94)
              	jmp Lcont94
              Lcode94:
              	push rbp
              	mov rbp, rsp

              
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy96


              	mov rcx,2
              	Extend96:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend96
              	AddDummy96:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue96  
              	AddParams96:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams96  
              	Continue96: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode96)
              	jmp Lcont96
              Lcode96:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 32
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy97


              	mov rcx,3
              	Extend97:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend97
              	AddDummy97:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue97  
              	AddParams97:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams97  
              	Continue97: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode97)
              	jmp Lcont97
              Lcode97:
              	push rbp
              	mov rbp, rsp

              	mov rax,const_tbl + 34
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse26
	mov rax, qword[rbp + 8 * (4 + 1)] 
	jmp Lexit26
	Lelse26:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*0] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*4] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax,const_tbl + 51
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*2] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame98:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame98

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit26:

              
              	leave
              	ret
              Lcont97:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS

		mov rax,const_tbl + 1
	push rax 
	mov rax,const_tbl + 51
	push rax 
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp + 8 * (4 + 0)] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame99:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame99

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont96:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame95:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame95

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont94:

              
              	leave
              	ret
              Lcont93:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 368] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 112] 
	push rax 
	mov rax, qword[fvar_tbl + 216] 
	push rax 
	mov rax, qword[fvar_tbl + 208] 
	push rax 
	mov rax, qword[fvar_tbl + 136] 
	push rax 
	mov rax, qword[fvar_tbl + 48] 
	push rax 
	mov rax, qword[fvar_tbl + 40] 
	push rax 
	mov rax, qword[fvar_tbl + 24] 
	push rax 
	mov rax, qword[fvar_tbl + 8] 
	push rax 
	mov rax, qword[fvar_tbl + 16] 
	push rax 
	mov rax, qword[fvar_tbl + 368] 
	push rax 
	mov rax, qword[fvar_tbl + 168] 
	push rax 

                	push 11
	MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, Lcode100)
	jmp Lcont100
	Lcode100:
	push rbp
	mov rbp,rsp
	
		mov rax,const_tbl + 23
	push rax 

                	push 1
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 16
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy102


              	mov rcx,1
              	Extend102:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend102
              	AddDummy102:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue102  
              	AddParams102:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams102  
              	Continue102: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode102)
              	jmp Lcont102
              Lcode102:
              	push rbp
              	mov rbp, rsp

                	MALLOC rax,WORD_SIZE
	mov rdx,qword[rbp+WORD_SIZE*(4+0)]
	mov qword[rax], rdx
	mov qword[rbp + 8 * (4 + 0)] , rax
	mov rax, SOB_VOID_ADDRESS
	mov rbx, qword[rbp +WORD_SIZE*2] ;pointer to Env
              	mov rax, 24
              	MALLOC rax,rax ;rax hold's pointer to major vector
              	mov rbx,qword[rbp+WORD_SIZE*2]        ;env pointer
              	mov r8, rax ;r8 = NewEnv
              	add rax, WORD_SIZE ; NewEnv[1]
              	cmp rbx,SOB_NIL_ADDRESS
              	je AddDummy103


              	mov rcx,2
              	Extend103:
              	mov rdx, qword[rbx]       ;rdx = Env[i]
              	mov qword[rax],rdx        ; ExtEnv[i+1] = Env[i]
              	add rbx, WORD_SIZE
              	add rax, WORD_SIZE
              	loop Extend103
              	AddDummy103:
              	mov qword[rax], SOB_NIL_ADDRESS

              	mov rax, qword[rbp+WORD_SIZE*3]     ; rax = argc
              	shl rax, 3
              	mov rbx, rax
              	MALLOC rbx, rbx ; create minor vector
              	mov rax, r8
              	mov qword[rax], rbx     ;ExtEnv[0] = minor vector


              	mov rdx, rbp
              	add rdx, 32     ; *rdx = params
              	mov rcx, qword[rbp+WORD_SIZE*3]     ;rcx = argc 
              	mov r8, rax
              	cmp rcx, 0
              	je Continue103  
              	AddParams103:
              	mov rax, qword[rdx]       ; rax = param[i]
              	mov qword[rbx],rax      ;ExtEnv[0][i] = param[i]
              	add rbx, WORD_SIZE
              	add rdx, WORD_SIZE
              	loop AddParams103  
              	Continue103: 
              	mov rbx, r8     ; rbx = *ExtEnv 
              	MAKE_CLOSURE(rax, rbx, Lcode103)
              	jmp Lcont103
              Lcode103:
              	push rbp
              	mov rbp, rsp

              	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse37
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*2] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit37
	Lelse37:
	mov rax,const_tbl + 2
	Lexit37:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse27

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame109:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame109

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit27
	Lelse27:
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse36
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*3] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit36
	Lelse36:
	mov rax,const_tbl + 2
	Lexit36:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse28

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame108:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame108

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit28
	Lelse28:
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*5] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse35
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*5] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit35
	Lelse35:
	mov rax,const_tbl + 2
	Lexit35:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse29

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*10] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*10] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*0] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame107:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame107

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit29
	Lelse29:
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*4] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse34
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*4] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit34
	Lelse34:
	mov rax,const_tbl + 2
	Lexit34:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse30
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*8] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*8] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse33

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*9] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*9] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame106:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame106

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit33
	Lelse33:
	mov rax,const_tbl + 2
	Lexit33:
	jmp Lexit30
	Lelse30:
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*6] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse32
	mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*6] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	jmp Lexit32
	Lelse32:
	mov rax,const_tbl + 2
	Lexit32:
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse31

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 1
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*1] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax+8*0] 
	mov rax, qword[rax] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame105:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame105

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	jmp Lexit31
	Lelse31:

		mov rax, qword[rbp + 8 * (4 + 1)] 
	push rax 
	mov rax, qword[rbp + 8 * (4 + 0)] 
	push rax 

                	push 2
	mov rax, qword[rbp+8*2] 
	mov rax, qword[rax+8*1] 
	mov rax, qword[rax+8*7] 

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame104:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame104

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]
	Lexit31:
	Lexit30:
	Lexit29:
	Lexit28:
	Lexit27:

              
              	leave
              	ret
              Lcont103:
	push rax
	mov rax, qword[rbp + 8 * (4 + 0)] 
	pop qword[rax]
	mov rax, SOB_VOID_ADDRESS
	mov rax, qword[rbp + 8 * (4 + 0)] 
	mov rax, qword[rax] 

              
              	leave
              	ret
              Lcont102:

    
                	push qword[rax + TYPE_SIZE]
                	push qword[rbp + 1*WORD_SIZE]
                	mov r8, qword[rbp +  3*WORD_SIZE]   
                	add r8, 4 
                	shl r8, 3 
                	add r8, rbp 

                	mov rdx, rbp 
                	mov rbp, qword[rbp]
                

                DuplicateFrame101:
                	sub rdx, WORD_SIZE
                	sub r8, WORD_SIZE               
                	mov rcx, qword[rdx]
                	mov qword[r8], rcx
                	cmp rdx, rsp
                	jne DuplicateFrame101

                	mov rsp, r8
                	jmp qword[rax+TYPE_SIZE+WORD_SIZE]

              
              	leave
              	ret
              Lcont100:

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 376] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax,const_tbl + 102
	push rax 
	mov rax,const_tbl + 85
	push rax 

                	push 2
	mov rax, qword[fvar_tbl + 96] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx
	mov qword[fvar_tbl + 384] , rax
	mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

	mov rax,const_tbl + 104
	push rax 
	mov rax,const_tbl + 34
	push rax 
	mov rax, qword[fvar_tbl + 384] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 88] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx

	call write_sob_if_not_void

	mov rax,const_tbl + 106
	push rax 
	mov rax,const_tbl + 51
	push rax 
	mov rax, qword[fvar_tbl + 384] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 88] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx

	call write_sob_if_not_void

	mov rax,const_tbl + 125
	push rax 
	mov rax,const_tbl + 108
	push rax 
	mov rax, qword[fvar_tbl + 384] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 88] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx

	call write_sob_if_not_void

	mov rax,const_tbl + 144
	push rax 
	mov rax,const_tbl + 127
	push rax 
	mov rax, qword[fvar_tbl + 384] 
	push rax 

                	push 3
	mov rax, qword[fvar_tbl + 88] 

                	push qword[rax+TYPE_SIZE]
                	call qword[rax+TYPE_SIZE+WORD_SIZE]
                	add rsp,8
                	pop rbx
                	shl rbx, 3
                	add rsp,rbx

	call write_sob_if_not_void

	mov rax, qword[fvar_tbl + 384] 

	call write_sob_if_not_void;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
   pop rbp
   add rsp, 3*8
   mov rax, 0

   ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

car:
      	push rbp
      	mov rbp,rsp
      	mov rdx, PVAR(0)
      	CAR rax, rdx
      	leave
      	ret 
 

set_car:
      	push rbp
      	mov rbp,rsp
      	mov rdx, PVAR(0)
      	mov rcx,PVAR(1)
      	mov qword[rdx+TYPE_SIZE],rcx
      	mov rax,SOB_VOID_ADDRESS
      	leave
      	ret 
 

cdr:
      	push rbp
      	mov rbp,rsp
      	mov rdx, PVAR(0)
      	CDR rax, rdx
      	leave
      	ret 
 

set_cdr:
      	push rbp
      	mov rbp,rsp
      	mov rdx, PVAR(0)
      	mov rcx,PVAR(1)
      	mov qword[rdx+TYPE_SIZE+WORD_SIZE],rcx
      	mov rax,SOB_VOID_ADDRESS
      	leave
      	ret 
 

cons:
      	push rbp
      	mov rbp,rsp
      	mov rdx,PVAR(0)
      	mov rcx, PVAR(1)
      	MAKE_PAIR (rax, rdx, rcx)
      	leave
      	ret 
 

apply:
        	push rbp
        	mov r15,rbp
        	mov rbp,rsp
        	mov r11, qword[rbp+WORD_SIZE*3] ; r11 = argc
        	mov rcx, r11 ; rcx = argc
        	dec rcx ; argc-1 because the first arg is PROC
        	mov rdx, PVAR(rcx) ; rdx = last param of apply (list)
        	mov r12, rdx ; r12 = last param of apply (list)
        	dec rcx ; argc-2 (PROC + lst)
        CalcNumOfArgs:
        	cmp rdx, SOB_NIL_ADDRESS
        	je Finished_Calc
        	inc rcx
        	CDR rdx,rdx ; getting to the CDR of the list
        	jmp CalcNumOfArgs
        Finished_Calc: ; rcx = the new argc (after calculating the list.length)
        	mov r14, rcx ; r14 = the new argc
        	imul rcx, 8
        	MALLOC rax, rcx ; rax = pointer of size |old_argc+list.length|
        	shr rcx, 3 ; the new argc
        	mov r9,1
        	mov rdx, r11
        	sub rdx, 2 ;argc-2 (PROC + lst)
        
        Save_Free_Args:
        	cmp rdx,0
        	je Finished_Save_Free
        	mov rbx, PVAR(r9)
        	mov qword[rax+WORD_SIZE*r9],rbx ; location of the new arg in the MALLOC
        	dec rdx
        	inc r9
        	jmp Save_Free_Args
  
        Finished_Save_Free: ; r11 = argc, r12 = list_of_params
        	mov rcx, 0
        	mov rbx, r12
        Save_Listed_Args:
        	cmp rbx,SOB_NIL_ADDRESS
        	je Clear_and_Fix_Stack
        	CAR rcx, rbx
        	mov qword[rax+r9*WORD_SIZE], rcx ; location of the new arg in the MALLOC
        	CDR rbx,rbx ; getting to the CDR of the list
        	inc r9
        	jmp Save_Listed_Args
  
        Clear_and_Fix_Stack: ; now we have the args arranged by order in *rax
        ;clear
        	mov r8, PVAR(0) ; r8 = PROC
        	mov rbx, qword[rbp+WORD_SIZE] ; ret address
        	shl r11, 3 ; old_argc*WORD_SIZE
        	add rsp, 32 ; skipping ret,ext_env, etc.
        	add rsp, r11 ; skipping the args
  
        	mov rcx, r14 ; number of new_argc
        Fix_Loop:
        	push qword[rax+WORD_SIZE*rcx]
        	loop Fix_Loop
  
        	CLOSURE_ENV rcx, r8 ; r8 = PROC ENV
        	CLOSURE_CODE rax, r8 ; rax = PROC CODE
        	mov rbp, r15
        	push r14 ; new_argc
        	push rcx ; env
        	push rbx ; ret address
        	jmp rax
  
        	leave
        	ret 
